{
  "name": "assemble",
  "description": "Visit http://assemble.io. Assemble is a full-featured documentation generator, static site generator and component builder. Created from the ground up as a plugin for Grunt.js.",
  "version": "0.4.6",
  "homepage": "http://assemble.io",
  "author": {
    "name": "assemble",
    "url": "https://github.com/assemble/assemble"
  },
  "contributors": [
    {
      "name": "Brian Woodward",
      "url": "https://github.com/doowb"
    },
    {
      "name": "Jon Schlinkert",
      "url": "https://github.com/jonschlinkert"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/assemble/assemble.git"
  },
  "bugs": {
    "url": "git://github.com/assemble/assemble/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/assemble/assemble/blob/master/LICENSE-MIT"
    }
  ],
  "main": "./lib/assemble",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt mochaTest"
  },
  "dependencies": {
    "assemble-front-matter": "~0.1.0",
    "assemble-handlebars": "~0.1.6",
    "highlight.js": "~7.3.0",
    "inflection": "~1.2.6",
    "js-yaml": "~2.1.0",
    "lodash": "~1.3.1",
    "marked": "~0.2.9",
    "time-grunt": "~0.1.1",
    "resolve-dep": "~0.1.1"
  },
  "devDependencies": {
    "assemble-internal": "~0.2.0",
    "chai": "~1.7.2",
    "grunt": "~0.4.1",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-jshint": "~0.6.4",
    "grunt-mocha-test": "~0.6.3"
  },
  "keywords": [
    "blog generator",
    "blog",
    "boilerplate",
    "boilerplates",
    "bootstrap",
    "build and deployment",
    "build bootstrap",
    "build system",
    "build",
    "builder",
    "compile",
    "compiler",
    "components",
    "conventions",
    "deploy",
    "example handlebars",
    "framework",
    "generator",
    "gh-pages",
    "grunt task",
    "grunt",
    "gruntplugin",
    "handlebars",
    "helpers",
    "jekyll alternative",
    "jekyll static",
    "jekyll",
    "json",
    "mock",
    "mocking",
    "modules",
    "mustache",
    "node blog",
    "node jekyll",
    "parse",
    "parser",
    "partial",
    "partials",
    "pre-processor",
    "preprocessor",
    "render",
    "renderer",
    "scaffold",
    "scaffolds",
    "site builder",
    "site generator",
    "site generators",
    "static HTML",
    "static site",
    "templates",
    "templating",
    "theme",
    "themes",
    "tool",
    "toolkit",
    "utility",
    "web development",
    "web framework",
    "yaml front matter",
    "yaml"
  ],
  "readme": "# assemble [![NPM version](https://badge.fury.io/js/assemble.png)](http://badge.fury.io/js/assemble)  [![Build Status](https://travis-ci.org/assemble/assemble.png?branch=master)](https://travis-ci.org/assemble/assemble)\n\n> Visit http://assemble.io. Assemble is a full-featured documentation generator, static site generator and component builder. Created from the ground up as a plugin for Grunt.js.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install assemble --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('assemble');\n```\n\n\n\n\n## Assemble task\n_Run this task with the `grunt assemble` command._\n\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\n\nIn your project's Gruntfile, add a section named `assemble` to the data object passed into `grunt.initConfig()`.\n\n```js\nassemble: {\n  options: {\n    assets: 'assets',\n    partials: ['docs/includes/**/*.hbs'],\n    data: ['docs/data/**/*.{json,yml}']\n  },\n  pages: {\n    src: ['docs/*.hbs'],\n    dest: './'\n  }\n},\n```\n\nSee the documentation for [Options](http://assemble.io/docs/Options.html) for more information.\n\n#### [assets](http://assemble.io/docs/options-assets.html)\nType: `String`\nDefault: `undefined`\n\nUsed with the `{{assets}}` variable to resolve the relative path from the _dest file_ to the _assets_ folder.\n\n#### [data](http://assemble.io/docs/options-data.html)\nType: `String|Array`\nDefault: `src/data`\n\nSpecify the data to supply to your templates. Data may be formatted in `JSON`, `YAML` or [YAML front matter](http://assemble.io/docs/YAML-front-matter.html).\n\n#### [layoutdir](http://assemble.io/docs/options-layoutdir.html)\nType: `String`\nDefault: `undefined`\n\nThe directory to use as the \"cwd\" for [layouts](http://assemble.io/docs/options-layout.html). When this option is defined, layouts may be defined using only the name of the layout.\n\n#### [layout](http://assemble.io/docs/options-layout.html)\nType: `String`\nDefault: `undefined`\n\nIf set, this defines the layout file to use for the [task or target][tasks-and-targets]. However, when specifying a layout, unlike Jekyll, _Assemble requires a file extension_ since you are not limited to using a single file type.\n\n[tasks-and-targets]: http://gruntjs.com/configuring-tasks#task-configuration-and-targets\n\n#### [partials](http://assemble.io/docs/options-partials.html)\nType:  `String|Array`\nDefault: `undefined`\n\nSpecifies the Handlebars partials files, or paths to the directories of files to be used.\n\n#### [helpers](http://assemble.io/docs/options-helpers.html)\nType: `String|Array`\nDefault: [handlebars-helpers](http://github.com/assemble/handlebars-helpers)\n\nPath to the custom helper or helpers to use with the current template engine.\n\nAssemble includes [handlebars-helpers](http://assemble.io/docs/helpers/index.html) as a dependency, so any helpers from that library may be used in your templates.\n\n#### [ext](http://assemble.io/docs/options-ext.html)\nType: `String`\nDefault: `.html`\n\nSpecify the file extension for destination files. Example:\n\n#### [marked](http://assemble.io/docs/options-marked.html)\nType: `Object`\nDefault: Marked.js defaults\n\nSpecify the [Marked.js options](https://github.com/chjj/marked#options-1) to use when converting from markdown to HTML.\n\n#### [engine](http://assemble.io/docs/options-engine.html)\nType: `String`\nDefault: Handlebars\n\nSpecify the engine to use for compiling templates. Handlebars is the default.\n\n#### flatten\nType: `Boolean`\nDefault: `false`\n\nRemove anything after (and including) the first \".\" in the destination path, then append this value. In other words, when files are generated from different source folders this \"flattens\" them into the same destination directory. See [building the files object dynamically][files-object] for more information on `files` formats.\n\n\nVisit [Assemble's documentation](http://assemble.io) for more information about options.\n### Usage examples\n\nSimple example of using data files in both `.json` and `.yml` format to build Handlebars templates.\n\n```javascript\nassemble: {\n  options: {\n    data: 'src/data/**/*.{json,yml}'\n  },\n  docs: {\n    files: {\n      'dist/': ['src/templates/**/*.hbs']\n    }\n  }\n}\n```\n\n#### Using multiple targets\n\n```js\nassemble: {\n  options: {\n    assets: 'assets',\n    layoutdir: 'docs/layouts'\n    partials: ['docs/includes/**/*.hbs'],\n    data: ['docs/data/**/*.{json,yml}']\n  },\n  site: {\n    options: {\n      layout: 'default.hbs'\n    },\n    src: ['templates/site/*.hbs'],\n    dest: './'\n  },\n  blog: {\n    options: {\n      layout: 'blog-layout.hbs'\n    },\n    src: ['templates/blog/*.hbs'],\n    dest: 'articles/'\n  },\n  docs: {\n    options: {\n      layout: 'docs-layout.hbs'\n    },\n    src: ['templates/docs/*.hbs'],\n    dest: 'docs/'\n  }\n},\n```\n\nVisit [Assemble's documentation](http://assemble.io) for many more examples and pointers on getting started.\n\n## Release History\n\n * 2013-09-15   v0.4.6   Updating how the assets path is calculated. Adding resolve-dep and ability to load helpers from node modules using minimatch patterns\n * 2013-09-03   v0.4.5   Bug fix: allow page content containing $. Add alias metadata for data on pages configuration object.\n * 2013-08-01   v0.4.4   Adds \"nested layouts\" Adds option for pages in JSON/YAML collections to be defined as either objects or keys in an array.\n * 2013-08-01   v0.4.3   Adds \"options.pages\" for passing in an array of pages in JSON or YAML format.\n * 2013-06-20   v0.4.0   Adds \"layoutdir\" option for defining the directory to be used for layouts. If layoutdir is defined, then layouts may be defined using only the name of the layout.\n * 2013-06-10   v0.3.81   Adds additional ways to load custom helpers. Now it's possible to use a glob pattern that points to a list of scripts with helpers to load. Adds examples and tests on how to use the new custom helper loading methods.\n * 2013-06-01   v0.3.80   Fixing bug with null value in engine\n * 2013-05-07   v0.3.77   Updated README with info about assemble methods\n * 2013-04-28   v0.3.74   Updating the assemble library to use the assemble-utils repo and unnecessary code.\n * 2013-04-21   v0.3.73   Fixing how the relative path helper worked and showing an example in the footer of the layout. This example is hidden, but can be seen by doing view source.\n * 2013-04-20   v0.3.72   Fixing the layout override issue happening in the page yaml headers. Something was missed during refactoring.\n * 2013-04-19   v0.3.9   Adds tags and categories to the root context and ensure that the current page context values don't override the root context values.\n * 2013-04-18   v0.3.8   Updating to use actual assets property from current page.\n * 2013-04-17   v0.3.7   Cleaning up some unused folders and tests\n * 2013-04-16   v0.3.6   Fixed missing assets property.\n * 2013-04-16   v0.3.5   Adds a sections array to the template engine so it can be used in helpers.\n * 2013-04-11   v0.3.4   More tests for helpers and global variables, organized tests. A number of bug fixes.\n * 2013-04-06   v0.3.3   helper-lib properly externalized and wired up. Global variables for filename, ext and pages\n * 2013-03-22   v0.3.22   Merged global and target level options so data and partial files can be joined\n * 2013-03-22   v0.3.21   Valid YAML now allowed in options.data object (along with JSON)\n * 2013-03-18   v0.3.14   new relative helper for resolving relative paths\n\n***\n\nProject authored by [Jon Schlinkert](https://github.com/jonschlinkert/).\n\n_This file was generated on Sun Sep 15 2013 20:53:37._\n",
  "readmeFilename": "README.md",
  "_id": "assemble@0.4.6",
  "_from": "assemble@~0.4.5"
}
