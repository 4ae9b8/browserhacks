{
  "name": "resolve-dep",
  "description": "Return the resolved filepaths to named npm module dependencies. Minimatch patterns can be used, and Lo-Dash templates can be used to load filepaths into Grunt config.",
  "version": "0.1.1",
  "homepage": "https://github.com/jonschlinkert/resolve-dep",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jonschlinkert/resolve-dep.git"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/resolve-dep/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jonschlinkert/resolve-dep/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/resolve-dep",
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "lodash": "~1.3.1",
    "matchdep": "~0.1.2"
  },
  "keywords": [
    "files",
    "glob",
    "grunt config",
    "grunt",
    "lo-dash templates",
    "load",
    "lodash templates",
    "match",
    "minimatch",
    "pattern",
    "require resolve",
    "require",
    "resolve file paths",
    "resolve node module",
    "resolve npm module",
    "resolve paths",
    "resolved filepath"
  ],
  "readme": "# resolve-dep [![NPM version](https://badge.fury.io/js/resolve-dep.png)](http://badge.fury.io/js/resolve-dep)\r\n\r\n> Return an array of resolved filepaths for specified npm module dependencies. Minimatch patterns can be used.\r\n\r\nUse in node projects (`var load = require('resolve-dep').load('*')`), or load directly into your project's Grunt config data using [templates](http://gruntjs.com/api/grunt.template) (`<%= _.load(\"foo\") %>`).\r\n\r\n\r\n\r\n## Getting started\r\n\r\nInstall the module with: `npm install resolve-dep --save`\r\n\r\n```js\r\nvar load = require('resolve-dep').load(pattern, config);\r\nconsole.log(load);\r\n```\r\n\r\n\r\n## Examples\r\n\r\n```js\r\n// Resolve filepaths to all dependencies from package.json\r\nrequire('resolve-dep').load('*');\r\n\r\n// Resolve filepaths to all devDependencies\r\nrequire('resolve-dep').loadDev('*');\r\n\r\n// Resolve filepaths to both dependencies and devDependencies\r\nrequire('resolve-dep').loadAll('*'));\r\n\r\n// Resolve the filepath to a specific module\r\nrequire('resolve-dep').path('specific-module-to-resolve');\r\n```\r\n\r\n[More examples →](EXAMPLES.md)\r\n\r\n\r\n\r\n### Lo-dash templates\r\n\r\nMixin methods from resolve-dep, so they can be used in Lo-Dash templates:\r\n\r\n```js\r\nmodule.exports = function (grunt) {\r\n  // start by adding this line of JavaScript to your Gruntfile\r\n  grunt.util._.mixin(require('resolve-dep'));\r\n  ...\r\n};\r\n```\r\n\r\nOnce the methods are mixed in, you may use them inside templates in your Grunt config:\r\n\r\n```js\r\ngrunt.initConfig({\r\n  less: {\r\n    // load normalize.css from node_modules, along with local files\r\n    src: ['<%= _.path(\"normalize.css\") %>', 'src/theme.less'],\r\n    dest: 'dist/'\r\n  }\r\n});\r\n```\r\n\r\nAny specified template strings (`<%= %>`) will be processed when config data is retrieved.\r\n\r\n\r\n### Templates Warning!\r\n\r\nWhen using templates as in the previous example, Grunt calls `toString` on the results, so you should only specify one file per template (otherwise, an array like `[\"a.js\", \"b.js\", \"c.js\"]` will be converted to `a,b,c`). This is a bummer, but currently it's a limitation that we'll have to deal with, because there is no easy or obvious way to resolve it.\r\n\r\nSo, if want to use templates to include resolved paths to modules in the `src` file patterns of a task, like this for example:\r\n\r\n* `node_modules/foo/lib/foo.js`, and\r\n* `node_modules/bar/lib/bar.js`\r\n\r\n\r\n#### Do this\r\n\r\n```js\r\nsrc: ['<%= _.path(\"foo\") %>', '<%= _.path(\"bar\") %>']\r\n// => [\"node_modules/foo/lib/foo.js\", \"node_modules/bar/lib/bar.js\"]\r\n```\r\n\r\n#### Not this\r\n\r\n```js\r\nsrc: ['<%= _.loadAll(\"*\") %>']\r\n// => [\"node_modules/foo/lib/foo.js,node_modules/bar/lib/bar.js\"]\r\n```\r\n\r\n[More examples →](EXAMPLES.md)\r\n\r\n\r\n\r\n## Usage\r\n\r\n```js\r\n// Resolve filepaths for dependencies\r\nload(pattern, config)\r\n// Resolve filepaths for devDependencies\r\nloadDev(pattern, config)\r\n// Resolve filepaths for all dependencies\r\nloadAll(pattern, config)\r\n// Resolve filepath for a specific module\r\nfilepath(pattern, config)\r\n```\r\n\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality.\r\n\r\n\r\n## Related projects\r\n\r\n+ [assemble/assemble](https://assemble.io)\r\n+ [assemble/handlebars-helpers](http://gruntjs.com/assemble/handlebars-helpers)\r\n+ [assemble/assemble-less](http://gruntjs.com/assemble/assemble-less)\r\n\r\n\r\n## Author\r\n\r\n**Jon Schlinkert**\r\n\r\n+ [http://github.com/jonschlinkert](http://gruntjs.com/jonschlinkert)\r\n+ [http://twitter.com/jonschlinkert](http://twitter.com/jonschlinkert)\r\n\r\nAlso, thank you to [@tkellen](http://github.com/tkellen) for the excellent [matchdep](http://github.com/tkellen/node-matchdep), which is used for filtering dependencies.\r\n\r\n\r\n## Release History\r\n* 2013-09-07    v0.1.0    First commit.\r\n\r\n\r\n## License\r\nCopyright (c) 2013 Jon Schlinkert, contributors.\r\nLicensed under the MIT license.\r\n",
  "readmeFilename": "README.md",
  "_id": "resolve-dep@0.1.1",
  "_from": "resolve-dep@~0.1.1"
}
